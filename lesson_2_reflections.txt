What happens when you initialize a repository?  Why do you need to do it?

Initialization creates the metadata associated with Git version control, and without this step Git won't be tracking changes to files in this repository (directory).

How is the staging area different form the working directory and the repository?  What value to think it offers?

The staging area contains the files that you want to commit, which can be a different list of files than the set of all files that have been changed in a repository.  This allows the user to control which changes are commited, but this can also be dangerous, as a checkout from a commit may not contain all of the required changes for a project to operate!

How can you use the staging area to make sure you have one commit per logical change?

Only stage the files corresponding to each logical commit.

What are some situations when branches would be helpful in keeping your history organized?  How would branches help?

Branches help to keep commit strings logically seperated, i.e. when major changes need to be implemented while fixing smaller bugs simultaneously.  Branches would keep the commits seperated, and would keep the software development continuing down both paths.

How do the diagrams help you vizualize the branch structure?

They help show how the branches and commits are spatially related to each other, which helps make sense of the commit flow.

What is the result of merging two branches together?  Why do we represent it in the diagram the way we do?

Merging branches creates a single branch from multiple branches, where the merge commit has as parents the commits from the merged branch heads.

What are the pros and cons of Git's automatic merging vs. always doing merges automatically?

It will save a lot of time, especially since most merges should be successful; however, there is risk that Git won't be able to (or might incorrectly) merge changes.






